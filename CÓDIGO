/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include<stdint.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t contador=0;
uint8_t modo;
uint32_t last_incremento;
uint32_t last_decremento;
uint32_t last_modo;

#define tiempo 200



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)  {
	  //Cambio de modo e indicador
	  if(HAL_GPIO_ReadPin(mode_GPIO_Port, mode_Pin) == GPIO_PIN_SET){
		  if(HAL_GetTick() - last_incremento>tiempo){
			  last_modo=HAL_GetTick();
			  modo=!modo;
			  HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin,modo);
		  }
	  }
	  //Botón de incremento
	  if(HAL_GPIO_ReadPin(incremento_GPIO_Port, incremento_Pin) == GPIO_PIN_SET){
		  if(HAL_GetTick() - last_incremento>tiempo){
			  last_incremento=HAL_GetTick();
			  contador++;
			  if(modo==0){
				  if(contador>9){
					  contador=0;
					  if (contador==0){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==1){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==2){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==3){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==4){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==5){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==6){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);

					  }
					  if (contador==7){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==8){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }
					  if (contador==9){
						  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
						  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
						  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
						  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
					  }

				  }
			  }
			  else{
				  if(contador>6){
					  contador=0;
					  if (contador==0){
						  HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
						  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
						  HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
					  }
					  if (contador==1){
						  HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,1);
						  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
						  HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
					  }
					  if (contador==2){
						  HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,1);
						  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
						  HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,1);
					  }
					  if (contador==3){
						  HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
						  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
						  HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,1);
					  }
					  if (contador==4){
						  HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
						  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,1);
						  HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,1);
					  }
					  if (contador==5){
						  HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
						  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,1);
						  HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
					  }
					  if(contador==6){
						  HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,1);
						  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,1);
						  HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
					  }
				  }
			  }
		  }
	  }

	  //Botón de decremento
	  if(HAL_GPIO_ReadPin(decremento_GPIO_Port, decremento_Pin) == GPIO_PIN_SET){
	  		  if(HAL_GetTick() - last_decremento>tiempo){
	  			  last_decremento=HAL_GetTick();
	  			  contador--;
	  			  if(modo==0){
	  				if(contador>9){
	  					contador=0;
	  					if (contador==0){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
	  						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==1){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
							HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
							HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==2){
							HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
							HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
							HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
							HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==3){
							HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
							HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
							HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==4){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
	  						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==5){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
	  						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==6){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
	  						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);

	  					}
	  					if (contador==7){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
	  						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==8){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
	  						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}
	  					if (contador==9){
	  						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
	  						HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
	  						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
	  						HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
	  					}

	  				}
	  			}
	  			else{
	  				if(contador>6){
	  					contador=0;
	  					if (contador==0){
	  						HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
	  						HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
	  						HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
	  					}
	  					if (contador==1){
	  						HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,1);
	  						HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
	  						HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
	  					}
	  					if (contador==2){
	  						HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,1);
	  						HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
	  						HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,1);
	  					}
	  					if (contador==3){
	  						HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
	  						HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,0);
	  						HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,1);
	  					}
	  					if (contador==4){
	  						HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
	  						HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,1);
	  						HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,1);
	  					}
	  					if (contador==5){
	  						HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,0);
	  						HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,1);
	  						HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
	  					}
	  					if(contador==6){
	  						HAL_GPIO_WritePin(ROJO_GPIO_Port, ROJO_Pin,1);
	  						HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin,1);
	  						HAL_GPIO_WritePin(AZUL_GPIO_Port, AZUL_Pin,0);
	  					}
	  				}
	  			}

	  		}
	  	}
}
    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|ROJO_Pin|AZUL_Pin|LED1_Pin
                          |LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : mode_Pin incremento_Pin decremento_Pin */
  GPIO_InitStruct.Pin = mode_Pin|incremento_Pin|decremento_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LED4_Pin ROJO_Pin AZUL_Pin LED1_Pin
                           LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|ROJO_Pin|AZUL_Pin|LED1_Pin
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : VERDE_Pin */
  GPIO_InitStruct.Pin = VERDE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(VERDE_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : AMARILLO_Pin */
  GPIO_InitStruct.Pin = AMARILLO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(AMARILLO_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
